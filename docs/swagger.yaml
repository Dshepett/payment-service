basePath: /
definitions:
  models.ChangeStatusRequest:
    properties:
      status:
        example: SUCCESS
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: incorrect user ID
        type: string
    type: object
  models.NewPaymentRequest:
    properties:
      amount:
        example: 6535
        type: integer
      currency:
        example: RUB
        type: string
      user_email:
        example: secret@mail.ru
        type: string
      user_id:
        example: 5
        type: integer
    type: object
  models.NewPaymentResponse:
    properties:
      payment:
        $ref: '#/definitions/models.Payment'
    type: object
  models.Payment:
    properties:
      amount:
        example: 3456
        type: integer
      created_at:
        example: "2022-06-09T14:48:12.288326+03:00"
        type: string
      currency:
        example: MDA
        type: string
      id:
        example: 35
        type: integer
      status:
        example: NEW
        type: string
      updated_at:
        example: "2022-06-09T14:48:12.288326+03:00"
        type: string
      user_email:
        example: user@gmail.com
        type: string
      user_id:
        example: 31
        type: integer
    type: object
  models.PaymentStatusResponse:
    properties:
      status:
        example: ERROR
        type: string
    type: object
  models.PaymentsResponse:
    properties:
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server celler server.
  title: Payment Service APi
  version: "1.0"
paths:
  /payments/{id}/change:
    post:
      consumes:
      - application/json
      description: Write description!!!
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      - description: status name
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ChangeStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Change payment's status
      tags:
      - Payments
  /payments/{id}/deny:
    delete:
      consumes:
      - application/json
      description: Write description!!!
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Deny payment if it is possible
      tags:
      - Payments
  /payments/{id}/status:
    get:
      consumes:
      - application/json
      description: Write description!!!
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaymentStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns payment's status
      tags:
      - Payments
  /payments/new:
    post:
      consumes:
      - application/json
      description: Write description!!!
      parameters:
      - description: payment info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.NewPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NewPaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create new payment
      tags:
      - Payments
  /payments/user/{id}:
    get:
      consumes:
      - application/json
      description: Write description!!!
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaymentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns all payments with chosen user ID
      tags:
      - Payments
  /payments/user/email/{email}:
    get:
      consumes:
      - application/json
      description: Write description!!!
      parameters:
      - description: User email
        example: user@gmail.com
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaymentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Returns all payments with chosen user email
      tags:
      - Payments
swagger: "2.0"
